library #lib;
import self as self;
import "dart:core" as core;
import "libraries_lib2.lib.dart" as lib;

import "file:pkg/vm/testcases/transformations/type_flow/transformer/libraries_lib2.lib.dart";
import "file:pkg/vm/testcases/transformations/type_flow/transformer/libraries_lib3.lib.dart";

static method used() → void {
  core::print(new lib::Foo2::•());
  core::print([@vm.inferred-type.metadata=dart.core::_OneByteString (value: "hi")] lib::bar2());
  core::print(#C1);
}
static method main() → dynamic {
  self::used();
}
constants  {
  #C1 = #file:pkg/vm/testcases/transformations/type_flow/transformer/libraries_lib3.lib.dart::_bazz
}
library libraries_lib2.lib.dart;
import self as self;
import "dart:core" as core;

class Foo2 extends core::Object {
  synthetic constructor •() → self::Foo2
    : super core::Object::•()
    ;
}
static method bar2() → core::String
  return "hi";
library libraries_lib3.lib.dart;
import self as self;

