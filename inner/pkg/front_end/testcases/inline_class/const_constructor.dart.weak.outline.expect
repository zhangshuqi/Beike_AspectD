library;
import self as self;
import "dart:core" as core;

inline class Class /* declaredRepresentationType = core::int */ {
  constructor • = self::Class|;
  tearoff • = self::Class|_#new#tearOff;
  constructor named = self::Class|named;
  tearoff named = self::Class|_#named#tearOff;
  static redirecting-factory redirect = self::Class|redirect;
  static tearoff redirect = self::Class|_#redirect#tearOff;
  static factory fact = self::Class|fact;
  static tearoff fact = self::Class|_#fact#tearOff;
  static redirecting-factory redirect2 = self::Class|redirect2;
  static tearoff redirect2 = self::Class|_#redirect2#tearOff;
}
static inline-class-member method Class|(core::int i) → self::Class
  ;
static inline-class-member method Class|_#new#tearOff(core::int i) → self::Class
  return self::Class|(i);
static inline-class-member method Class|named(core::int i) → self::Class
  ;
static inline-class-member method Class|_#named#tearOff(core::int i) → self::Class
  return self::Class|named(i);
static inline-class-member method Class|redirect(core::int i) → self::Class /* redirection-target: self::Class| */
  return self::Class|(i);
static inline-class-member method Class|_#redirect#tearOff(core::int i) → self::Class;
static inline-class-member method Class|fact(core::int i) → self::Class
  ;
static inline-class-member method Class|_#fact#tearOff(core::int i) → self::Class
  return self::Class|fact(i);
static inline-class-member method Class|redirect2(core::int i) → self::Class /* redirection-target: self::Class| */
  return self::Class|(i);
static inline-class-member method Class|_#redirect2#tearOff(core::int i) → self::Class;
static method test() → dynamic
  ;
static method main() → dynamic
  ;
static method expect(dynamic expected, dynamic actual) → dynamic
  ;
