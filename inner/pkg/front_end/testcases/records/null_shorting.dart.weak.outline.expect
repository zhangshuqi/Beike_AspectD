library;
import self as self;
import "dart:core" as core;

class Class extends core::Object {
  synthetic constructor •() → self::Class
    ;
  method call() → void
    ;
}
extension /* unnamed */ _extension#0 on core::int {
  method call = self::_extension#0|call;
  tearoff call = self::_extension#0|get#call;
}
extension /* unnamed */ _extension#1 on core::String {
  method call = self::_extension#1|call;
  tearoff call = self::_extension#1|get#call;
}
extension /* unnamed */ _extension#2 on core::double {
  method call = self::_extension#2|call;
  tearoff call = self::_extension#2|get#call;
}
static method test((core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})? record, core::List<(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})>? list) → dynamic
  ;
static extension-member method _extension#0|call(lowered final core::int #this) → void
  ;
static extension-member method _extension#0|get#call(lowered final core::int #this) → () → void
  return () → void => self::_extension#0|call(#this);
static extension-member method _extension#1|call(lowered final core::String #this) → void
  ;
static extension-member method _extension#1|get#call(lowered final core::String #this) → () → void
  return () → void => self::_extension#1|call(#this);
static extension-member method _extension#2|call(lowered final core::double #this) → void
  ;
static extension-member method _extension#2|get#call(lowered final core::double #this) → () → void
  return () → void => self::_extension#2|call(#this);
