library;
//
// Problems in library:
//
// pkg/front_end/testcases/records/type_record_constructor_forbidden.dart:8:11: Error: The class 'Record' is abstract and can't be instantiated.
// foo1() => Record(); // Error.
//           ^^^^^^
//
// pkg/front_end/testcases/records/type_record_constructor_forbidden.dart:9:11: Error: The class 'Record' is abstract and can't be instantiated.
// foo2() => R(); // Error.
//           ^^^^^^
//
// pkg/front_end/testcases/records/type_record_constructor_forbidden.dart:10:11: Error: The class 'Record' is abstract and can't be instantiated.
// foo3() => RR(); // Error.
//           ^^^^^^
//
import self as self;
import "dart:core" as core;

typedef R = core::Record;
typedef RR = core::Record;
static method foo1() → dynamic
  return invalid-expression "The class 'Record' is abstract and can't be instantiated.";
static method foo2() → dynamic
  return invalid-expression "The class 'Record' is abstract and can't be instantiated.";
static method foo3() → dynamic
  return invalid-expression "The class 'Record' is abstract and can't be instantiated.";
static method main() → dynamic {}
