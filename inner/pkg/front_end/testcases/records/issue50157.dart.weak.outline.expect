library;
import self as self;
import "dart:core" as core;

typedef R = ({required foo: core::int});
class A extends core::Object {
  synthetic constructor •() → self::A
    ;
  get foo() → core::int
    ;
}
extension /* unnamed */ _extension#0 on self::A {
  set foo = self::_extension#0|set#foo;
}
extension /* unnamed */ _extension#1 on ({required foo: core::int}) {
  set foo = self::_extension#1|set#foo;
}
static extension-member method _extension#0|set#foo(lowered final self::A #this, core::int value) → void
  ;
static extension-member method _extension#1|set#foo(lowered final({required foo: core::int}) #this, core::int value) → void
  ;
static method test(self::A a, ({required foo: core::int}) r) → dynamic
  ;
