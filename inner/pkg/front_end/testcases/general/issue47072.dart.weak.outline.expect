library;
import self as self;
import "dart:core" as core;

class A extends core::Object {
  synthetic constructor •() → self::A
    ;
}
class B extends self::A {
  synthetic constructor •() → self::B
    ;
}
class C extends core::Object {
  synthetic constructor •() → self::C
    ;
  method f(self::B b) → void
    ;
}
abstract class I extends core::Object {
  synthetic constructor •() → self::I
    ;
  abstract method f(covariant-by-declaration self::A a) → void;
}
class D extends self::C implements self::I {
  synthetic constructor •() → self::D
    ;
  forwarding-stub method f(covariant-by-declaration self::A a) → void
    return super.{self::C::f}(a as{ForLegacy} self::B);
}
static method main() → void
  ;
