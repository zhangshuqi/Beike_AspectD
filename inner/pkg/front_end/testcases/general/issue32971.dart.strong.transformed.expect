library /*isLegacy*/;
//
// Problems in library:
//
// pkg/front_end/testcases/general/issue32971.dart:5:1: Error: Library doesn't support null safety.
// // @dart = 2.9
// ^^^^^^^^^^^^^^
//
import self as self;
import "dart:core" as core;
import "package:expect/expect.dart" as exp;

import "package:expect/expect.dart";

abstract class _A&B&M extends self::B implements self::M /*isAnonymousMixin,isEliminatedMixin*/  {
  synthetic constructor •() → self::_A&B&M*
    : super self::B::•()
    ;
  method g() → core::bool* {
    switch(true) /* core::bool* */ {
      #L1:
      default:
        {
          return true;
        }
    }
    return false;
  }
}
class A extends self::_A&B&M {
  synthetic constructor •() → self::A*
    : super self::_A&B&M::•()
    ;
}
class B extends core::Object {
  synthetic constructor •() → self::B*
    : super core::Object::•()
    ;
  method f() → core::bool* {
    switch(true) /* core::bool* */ {
      #L2:
      default:
        {
          return true;
        }
    }
    return false;
  }
  abstract member-signature method noSuchMethod(core::Invocation* invocation) → dynamic; -> core::Object::noSuchMethod
  abstract member-signature get _identityHashCode() → core::int*; -> core::Object::_identityHashCode
  abstract member-signature method _instanceOf(dynamic instantiatorTypeArguments, dynamic functionTypeArguments, dynamic type) → core::bool*; -> core::Object::_instanceOf
  abstract member-signature method _simpleInstanceOf(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOf
  abstract member-signature method _simpleInstanceOfTrue(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOfTrue
  abstract member-signature method _simpleInstanceOfFalse(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOfFalse
  abstract member-signature operator ==(dynamic other) → core::bool*; -> core::Object::==
  abstract member-signature get hashCode() → core::int*; -> core::Object::hashCode
  abstract member-signature method toString() → core::String*; -> core::Object::toString
  abstract member-signature get runtimeType() → core::Type*; -> core::Object::runtimeType
}
class M extends core::Object {
  synthetic constructor •() → self::M*
    : super core::Object::•()
    ;
  method g() → core::bool* {
    switch(true) /* core::bool* */ {
      #L3:
      default:
        {
          return true;
        }
    }
    return false;
  }
  abstract member-signature method noSuchMethod(core::Invocation* invocation) → dynamic; -> core::Object::noSuchMethod
  abstract member-signature get _identityHashCode() → core::int*; -> core::Object::_identityHashCode
  abstract member-signature method _instanceOf(dynamic instantiatorTypeArguments, dynamic functionTypeArguments, dynamic type) → core::bool*; -> core::Object::_instanceOf
  abstract member-signature method _simpleInstanceOf(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOf
  abstract member-signature method _simpleInstanceOfTrue(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOfTrue
  abstract member-signature method _simpleInstanceOfFalse(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOfFalse
  abstract member-signature operator ==(dynamic other) → core::bool*; -> core::Object::==
  abstract member-signature get hashCode() → core::int*; -> core::Object::hashCode
  abstract member-signature method toString() → core::String*; -> core::Object::toString
  abstract member-signature get runtimeType() → core::Type*; -> core::Object::runtimeType
}
static method main() → void {
  final self::A* o = new self::A::•();
  exp::Expect::isTrue(o.{self::B::f}(){() →* core::bool*});
  exp::Expect::isTrue(o.{self::_A&B&M::g}(){() →* core::bool*});
}
