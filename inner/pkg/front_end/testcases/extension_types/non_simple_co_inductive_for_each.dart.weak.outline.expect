library;
//
// Problems in library:
//
// pkg/front_end/testcases/extension_types/non_simple_co_inductive_for_each.dart:8:9: Error: Generic type 'A' can't be used without type arguments in the bounds of its own type variables.
// Try providing type arguments to 'A' here.
// class A<TypeX extends A, TypeY extends A> {}
//         ^^^^^
//
// pkg/front_end/testcases/extension_types/non_simple_co_inductive_for_each.dart:8:26: Error: Generic type 'A' can't be used without type arguments in the bounds of its own type variables.
// Try providing type arguments to 'A' here.
// class A<TypeX extends A, TypeY extends A> {}
//                          ^^^^^
//
// pkg/front_end/testcases/extension_types/non_simple_co_inductive_for_each.dart:10:13: Error: Generic type 'B' can't be used without type arguments in the bounds of its own type variables.
// Try providing type arguments to 'B' here.
// extension B<TypeX extends B, TypeY extends B> on int {}
//             ^^^^^
//
// pkg/front_end/testcases/extension_types/non_simple_co_inductive_for_each.dart:10:30: Error: Generic type 'B' can't be used without type arguments in the bounds of its own type variables.
// Try providing type arguments to 'B' here.
// extension B<TypeX extends B, TypeY extends B> on int {}
//                              ^^^^^
//
// pkg/front_end/testcases/extension_types/non_simple_co_inductive_for_each.dart:12:9: Error: The typedef 'C' has a reference to itself.
// typedef C<TypeX extends C, TypeY extends C> = int;
//         ^
//
import self as self;
import "dart:core" as core;

typedef C<unrelated TypeX extends invalid-type, unrelated TypeY extends invalid-type> = invalid-type;
class A<TypeX extends core::Object? = dynamic, TypeY extends core::Object? = dynamic> extends core::Object {
  synthetic constructor •() → self::A<self::A::TypeX%, self::A::TypeY%>
    ;
}
extension B<TypeX extends core::Object? = dynamic, TypeY extends core::Object? = dynamic> on core::int {
}
static method main() → dynamic
  ;
