library;
import self as self;
import "dart:core" as core;
import "dart:_internal" as _in;

class Annotation extends core::Object /*hasConstConstructor*/  {
  const constructor •() → self::Annotation
    : super core::Object::•()
    ;
}
class A extends core::Object {
  field core::int? _#A#instanceField = null;
  field core::bool _#A#instanceField#isSet = false;
  field core::int? _#A#finalInstanceField = null;
  field core::bool _#A#finalInstanceField#isSet = false;
  field core::int? _#A#finalInstanceFieldWithInitializer = null;
  field core::bool _#A#finalInstanceFieldWithInitializer#isSet = false;
  field core::num? _#A#covariantInstanceField = null;
  field core::bool _#A#covariantInstanceField#isSet = false;
  static field core::int? _#staticField = null;
  static field core::bool _#staticField#isSet = false;
  static field core::int? _#finalStaticField = null;
  static field core::bool _#finalStaticField#isSet = false;
  static field core::int? _#finalStaticFieldWithInitializer = null;
  static field core::bool _#finalStaticFieldWithInitializer#isSet = false;
  synthetic constructor •() → self::A
    : super core::Object::•()
    ;
  @#C1
  get instanceField() → core::int
    return this.{self::A::_#A#instanceField#isSet}{core::bool} ?{core::int} let final core::int? #t1 = this.{self::A::_#A#instanceField}{core::int?} in #t1{core::int} : throw new _in::LateError::fieldNI("instanceField");
  @#C1
  set instanceField(core::int instanceField#param) → void {
    this.{self::A::_#A#instanceField#isSet} = true;
    this.{self::A::_#A#instanceField} = instanceField#param;
  }
  @#C1
  get finalInstanceField() → core::int
    return this.{self::A::_#A#finalInstanceField#isSet}{core::bool} ?{core::int} let final core::int? #t2 = this.{self::A::_#A#finalInstanceField}{core::int?} in #t2{core::int} : throw new _in::LateError::fieldNI("finalInstanceField");
  @#C1
  set finalInstanceField(core::int finalInstanceField#param) → void
    if(this.{self::A::_#A#finalInstanceField#isSet}{core::bool})
      throw new _in::LateError::fieldAI("finalInstanceField");
    else {
      this.{self::A::_#A#finalInstanceField#isSet} = true;
      this.{self::A::_#A#finalInstanceField} = finalInstanceField#param;
    }
  @#C1
  get finalInstanceFieldWithInitializer() → core::int {
    if(!this.{self::A::_#A#finalInstanceFieldWithInitializer#isSet}{core::bool}) {
      final core::int #t3 = 0;
      if(this.{self::A::_#A#finalInstanceFieldWithInitializer#isSet}{core::bool})
        throw new _in::LateError::fieldADI("finalInstanceFieldWithInitializer");
      this.{self::A::_#A#finalInstanceFieldWithInitializer} = #t3;
      this.{self::A::_#A#finalInstanceFieldWithInitializer#isSet} = true;
    }
    return let final core::int? #t4 = this.{self::A::_#A#finalInstanceFieldWithInitializer}{core::int?} in #t4{core::int};
  }
  @#C1
  get covariantInstanceField() → core::num
    return this.{self::A::_#A#covariantInstanceField#isSet}{core::bool} ?{core::num} let final core::num? #t5 = this.{self::A::_#A#covariantInstanceField}{core::num?} in #t5{core::num} : throw new _in::LateError::fieldNI("covariantInstanceField");
  @#C1
  set covariantInstanceField(covariant-by-declaration core::num covariantInstanceField#param) → void {
    this.{self::A::_#A#covariantInstanceField#isSet} = true;
    this.{self::A::_#A#covariantInstanceField} = covariantInstanceField#param;
  }
  @#C1
  static get staticField() → core::int
    return self::A::_#staticField#isSet ?{core::int} let final core::int? #t6 = self::A::_#staticField in #t6{core::int} : throw new _in::LateError::fieldNI("staticField");
  @#C1
  static set staticField(core::int staticField#param) → void {
    self::A::_#staticField#isSet = true;
    self::A::_#staticField = staticField#param;
  }
  @#C1
  static get finalStaticField() → core::int
    return self::A::_#finalStaticField#isSet ?{core::int} let final core::int? #t7 = self::A::_#finalStaticField in #t7{core::int} : throw new _in::LateError::fieldNI("finalStaticField");
  @#C1
  static set finalStaticField(core::int finalStaticField#param) → void
    if(self::A::_#finalStaticField#isSet)
      throw new _in::LateError::fieldAI("finalStaticField");
    else {
      self::A::_#finalStaticField#isSet = true;
      self::A::_#finalStaticField = finalStaticField#param;
    }
  @#C1
  static get finalStaticFieldWithInitializer() → core::int {
    if(!self::A::_#finalStaticFieldWithInitializer#isSet) {
      final core::int #t8 = 0;
      if(self::A::_#finalStaticFieldWithInitializer#isSet)
        throw new _in::LateError::fieldADI("finalStaticFieldWithInitializer");
      self::A::_#finalStaticFieldWithInitializer = #t8;
      self::A::_#finalStaticFieldWithInitializer#isSet = true;
    }
    return let final core::int? #t9 = self::A::_#finalStaticFieldWithInitializer in #t9{core::int};
  }
}
abstract class B extends core::Object /*isMixinDeclaration*/  {
  field core::int? _#B#instanceField = null;
  field core::bool _#B#instanceField#isSet = false;
  field core::int? _#B#finalInstanceField = null;
  field core::bool _#B#finalInstanceField#isSet = false;
  field core::int? _#B#finalInstanceFieldWithInitializer = null;
  field core::bool _#B#finalInstanceFieldWithInitializer#isSet = false;
  field core::num? _#B#covariantInstanceField = null;
  field core::bool _#B#covariantInstanceField#isSet = false;
  static field core::int? _#staticField = null;
  static field core::bool _#staticField#isSet = false;
  static field core::int? _#finalStaticField = null;
  static field core::bool _#finalStaticField#isSet = false;
  static field core::int? _#finalStaticFieldWithInitializer = null;
  static field core::bool _#finalStaticFieldWithInitializer#isSet = false;
  @#C1
  get instanceField() → core::int
    return this.{self::B::_#B#instanceField#isSet}{core::bool} ?{core::int} let final core::int? #t10 = this.{self::B::_#B#instanceField}{core::int?} in #t10{core::int} : throw new _in::LateError::fieldNI("instanceField");
  @#C1
  set instanceField(core::int instanceField#param) → void {
    this.{self::B::_#B#instanceField#isSet} = true;
    this.{self::B::_#B#instanceField} = instanceField#param;
  }
  @#C1
  get finalInstanceField() → core::int
    return this.{self::B::_#B#finalInstanceField#isSet}{core::bool} ?{core::int} let final core::int? #t11 = this.{self::B::_#B#finalInstanceField}{core::int?} in #t11{core::int} : throw new _in::LateError::fieldNI("finalInstanceField");
  @#C1
  set finalInstanceField(core::int finalInstanceField#param) → void
    if(this.{self::B::_#B#finalInstanceField#isSet}{core::bool})
      throw new _in::LateError::fieldAI("finalInstanceField");
    else {
      this.{self::B::_#B#finalInstanceField#isSet} = true;
      this.{self::B::_#B#finalInstanceField} = finalInstanceField#param;
    }
  @#C1
  get finalInstanceFieldWithInitializer() → core::int {
    if(!this.{self::B::_#B#finalInstanceFieldWithInitializer#isSet}{core::bool}) {
      final core::int #t12 = 0;
      if(this.{self::B::_#B#finalInstanceFieldWithInitializer#isSet}{core::bool})
        throw new _in::LateError::fieldADI("finalInstanceFieldWithInitializer");
      this.{self::B::_#B#finalInstanceFieldWithInitializer} = #t12;
      this.{self::B::_#B#finalInstanceFieldWithInitializer#isSet} = true;
    }
    return let final core::int? #t13 = this.{self::B::_#B#finalInstanceFieldWithInitializer}{core::int?} in #t13{core::int};
  }
  @#C1
  get covariantInstanceField() → core::num
    return this.{self::B::_#B#covariantInstanceField#isSet}{core::bool} ?{core::num} let final core::num? #t14 = this.{self::B::_#B#covariantInstanceField}{core::num?} in #t14{core::num} : throw new _in::LateError::fieldNI("covariantInstanceField");
  @#C1
  set covariantInstanceField(covariant-by-declaration core::num covariantInstanceField#param) → void {
    this.{self::B::_#B#covariantInstanceField#isSet} = true;
    this.{self::B::_#B#covariantInstanceField} = covariantInstanceField#param;
  }
  @#C1
  static get staticField() → core::int
    return self::B::_#staticField#isSet ?{core::int} let final core::int? #t15 = self::B::_#staticField in #t15{core::int} : throw new _in::LateError::fieldNI("staticField");
  @#C1
  static set staticField(core::int staticField#param) → void {
    self::B::_#staticField#isSet = true;
    self::B::_#staticField = staticField#param;
  }
  @#C1
  static get finalStaticField() → core::int
    return self::B::_#finalStaticField#isSet ?{core::int} let final core::int? #t16 = self::B::_#finalStaticField in #t16{core::int} : throw new _in::LateError::fieldNI("finalStaticField");
  @#C1
  static set finalStaticField(core::int finalStaticField#param) → void
    if(self::B::_#finalStaticField#isSet)
      throw new _in::LateError::fieldAI("finalStaticField");
    else {
      self::B::_#finalStaticField#isSet = true;
      self::B::_#finalStaticField = finalStaticField#param;
    }
  @#C1
  static get finalStaticFieldWithInitializer() → core::int {
    if(!self::B::_#finalStaticFieldWithInitializer#isSet) {
      final core::int #t17 = 0;
      if(self::B::_#finalStaticFieldWithInitializer#isSet)
        throw new _in::LateError::fieldADI("finalStaticFieldWithInitializer");
      self::B::_#finalStaticFieldWithInitializer = #t17;
      self::B::_#finalStaticFieldWithInitializer#isSet = true;
    }
    return let final core::int? #t18 = self::B::_#finalStaticFieldWithInitializer in #t18{core::int};
  }
}
extension Extension on self::A {
  static field extensionStaticField = self::_#Extension|extensionStaticField;
  static field extensionStaticField = self::_#Extension|extensionStaticField#isSet;
  static get extensionStaticField = get self::Extension|extensionStaticField;
  static set extensionStaticField = set self::Extension|extensionStaticField;
  static field finalExtensionStaticField = self::_#Extension|finalExtensionStaticField;
  static field finalExtensionStaticField = self::_#Extension|finalExtensionStaticField#isSet;
  static get finalExtensionStaticField = get self::Extension|finalExtensionStaticField;
  static set finalExtensionStaticField = set self::Extension|finalExtensionStaticField;
  static field finalExtensionStaticFieldWithInitializer = self::_#Extension|finalExtensionStaticFieldWithInitializer;
  static field finalExtensionStaticFieldWithInitializer = self::_#Extension|finalExtensionStaticFieldWithInitializer#isSet;
  static get finalExtensionStaticFieldWithInitializer = get self::Extension|finalExtensionStaticFieldWithInitializer;
}
static field core::int? _#topLevelField = null;
static field core::bool _#topLevelField#isSet = false;
static field core::int? _#finalTopLevelField = null;
static field core::bool _#finalTopLevelField#isSet = false;
static field core::int? _#finalTopLevelFieldWithInitializer = null;
static field core::bool _#finalTopLevelFieldWithInitializer#isSet = false;
static field core::int? _#Extension|extensionStaticField = null;
static field core::bool _#Extension|extensionStaticField#isSet = false;
static field core::int? _#Extension|finalExtensionStaticField = null;
static field core::bool _#Extension|finalExtensionStaticField#isSet = false;
static field core::int? _#Extension|finalExtensionStaticFieldWithInitializer = null;
static field core::bool _#Extension|finalExtensionStaticFieldWithInitializer#isSet = false;
@#C1
static get topLevelField() → core::int
  return self::_#topLevelField#isSet ?{core::int} let final core::int? #t19 = self::_#topLevelField in #t19{core::int} : throw new _in::LateError::fieldNI("topLevelField");
@#C1
static set topLevelField(core::int topLevelField#param) → void {
  self::_#topLevelField#isSet = true;
  self::_#topLevelField = topLevelField#param;
}
@#C1
static get finalTopLevelField() → core::int
  return self::_#finalTopLevelField#isSet ?{core::int} let final core::int? #t20 = self::_#finalTopLevelField in #t20{core::int} : throw new _in::LateError::fieldNI("finalTopLevelField");
@#C1
static set finalTopLevelField(core::int finalTopLevelField#param) → void
  if(self::_#finalTopLevelField#isSet)
    throw new _in::LateError::fieldAI("finalTopLevelField");
  else {
    self::_#finalTopLevelField#isSet = true;
    self::_#finalTopLevelField = finalTopLevelField#param;
  }
@#C1
static get finalTopLevelFieldWithInitializer() → core::int {
  if(!self::_#finalTopLevelFieldWithInitializer#isSet) {
    final core::int #t21 = 0;
    if(self::_#finalTopLevelFieldWithInitializer#isSet)
      throw new _in::LateError::fieldADI("finalTopLevelFieldWithInitializer");
    self::_#finalTopLevelFieldWithInitializer = #t21;
    self::_#finalTopLevelFieldWithInitializer#isSet = true;
  }
  return let final core::int? #t22 = self::_#finalTopLevelFieldWithInitializer in #t22{core::int};
}
@#C1
static extension-member get Extension|extensionStaticField() → core::int
  return self::_#Extension|extensionStaticField#isSet ?{core::int} let final core::int? #t23 = self::_#Extension|extensionStaticField in #t23{core::int} : throw new _in::LateError::fieldNI("extensionStaticField");
@#C1
static extension-member set Extension|extensionStaticField(core::int extensionStaticField#param) → void {
  self::_#Extension|extensionStaticField#isSet = true;
  self::_#Extension|extensionStaticField = extensionStaticField#param;
}
@#C1
static extension-member get Extension|finalExtensionStaticField() → core::int
  return self::_#Extension|finalExtensionStaticField#isSet ?{core::int} let final core::int? #t24 = self::_#Extension|finalExtensionStaticField in #t24{core::int} : throw new _in::LateError::fieldNI("finalExtensionStaticField");
@#C1
static extension-member set Extension|finalExtensionStaticField(core::int finalExtensionStaticField#param) → void
  if(self::_#Extension|finalExtensionStaticField#isSet)
    throw new _in::LateError::fieldAI("finalExtensionStaticField");
  else {
    self::_#Extension|finalExtensionStaticField#isSet = true;
    self::_#Extension|finalExtensionStaticField = finalExtensionStaticField#param;
  }
@#C1
static extension-member get Extension|finalExtensionStaticFieldWithInitializer() → core::int {
  if(!self::_#Extension|finalExtensionStaticFieldWithInitializer#isSet) {
    final core::int #t25 = 0;
    if(self::_#Extension|finalExtensionStaticFieldWithInitializer#isSet)
      throw new _in::LateError::fieldADI("finalExtensionStaticFieldWithInitializer");
    self::_#Extension|finalExtensionStaticFieldWithInitializer = #t25;
    self::_#Extension|finalExtensionStaticFieldWithInitializer#isSet = true;
  }
  return let final core::int? #t26 = self::_#Extension|finalExtensionStaticFieldWithInitializer in #t26{core::int};
}
static method main() → dynamic {}

constants  {
  #C1 = self::Annotation {}
}


Constructor coverage from constants:
org-dartlang-testcase:///late_annotations.dart:
- Annotation. (from org-dartlang-testcase:///late_annotations.dart:6:9)
- Object. (from org-dartlang-sdk:///sdk/lib/core/object.dart)
