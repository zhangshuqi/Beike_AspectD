library test;
import self as self;
import "dart:core" as core;

abstract class Test<T extends core::Object? = dynamic, U extends core::Object? = dynamic> extends core::Object {
  synthetic constructor •() → self::Test<self::Test::T%, self::Test::U%>
    ;
  abstract operator [](core::String s) → self::Test::T%;
  abstract operator []=(core::String s, covariant-by-class self::Test::U% v) → void;
}
abstract class Test2<T extends core::Object? = dynamic, U extends core::Object? = dynamic> extends core::Object {
  synthetic constructor •() → self::Test2<self::Test2::T%, self::Test2::U%>
    ;
  abstract operator [](core::String s) → self::Test2::T?;
  abstract operator []=(core::String s, covariant-by-class self::Test2::U? v) → void;
}
static method getInt() → core::int
  ;
static method getNum() → core::num
  ;
static method getDouble() → core::double
  ;
static method test1(self::Test<core::int, core::int> t, self::Test2<core::int, core::int> t2) → void
  ;
static method test2(self::Test<core::int, core::num> t, self::Test2<core::int, core::num> t2) → void
  ;
static method test3(self::Test<core::int, core::double> t, self::Test2<core::int, core::double> t2) → void
  ;
static method test4(self::Test<core::num, core::int> t, self::Test2<core::num, core::int> t2) → void
  ;
static method test5(self::Test<core::num, core::num> t, self::Test2<core::num, core::num> t2) → void
  ;
static method test6(self::Test<core::num, core::double> t, self::Test2<core::num, core::double> t2) → void
  ;
static method test7(self::Test<core::double, core::int> t, self::Test2<core::double, core::int> t2) → void
  ;
static method test8(self::Test<core::double, core::num> t, self::Test2<core::double, core::num> t2) → void
  ;
static method test9(self::Test<core::double, core::double> t, self::Test2<core::double, core::double> t2) → void
  ;
static method main() → dynamic
  ;
