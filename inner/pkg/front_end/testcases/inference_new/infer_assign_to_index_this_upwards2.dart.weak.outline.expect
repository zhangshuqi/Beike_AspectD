library test;
import self as self;
import "dart:core" as core;

abstract class Test1a extends core::Object {
  synthetic constructor •() → self::Test1a
    ;
  abstract operator [](core::String s) → core::int;
  abstract operator []=(core::String s, core::int v) → void;
  method test() → void
    ;
}
abstract class Test1b extends core::Object {
  synthetic constructor •() → self::Test1b
    ;
  abstract operator [](core::String s) → core::int?;
  abstract operator []=(core::String s, core::int? v) → void;
  method test() → void
    ;
}
abstract class Test2a extends core::Object {
  synthetic constructor •() → self::Test2a
    ;
  abstract operator [](core::String s) → core::int;
  abstract operator []=(core::String s, core::num v) → void;
  method test() → void
    ;
}
abstract class Test2b extends core::Object {
  synthetic constructor •() → self::Test2b
    ;
  abstract operator [](core::String s) → core::int?;
  abstract operator []=(core::String s, core::num? v) → void;
  method test() → void
    ;
}
abstract class Test3a extends core::Object {
  synthetic constructor •() → self::Test3a
    ;
  abstract operator [](core::String s) → core::int;
  abstract operator []=(core::String s, core::double v) → void;
  method test() → void
    ;
}
abstract class Test3b extends core::Object {
  synthetic constructor •() → self::Test3b
    ;
  abstract operator [](core::String s) → core::int?;
  abstract operator []=(core::String s, core::double? v) → void;
  method test() → void
    ;
}
abstract class Test4a extends core::Object {
  synthetic constructor •() → self::Test4a
    ;
  abstract operator [](core::String s) → core::num;
  abstract operator []=(core::String s, core::int v) → void;
  method test() → void
    ;
}
abstract class Test4b extends core::Object {
  synthetic constructor •() → self::Test4b
    ;
  abstract operator [](core::String s) → core::num?;
  abstract operator []=(core::String s, core::int? v) → void;
  method test() → void
    ;
}
abstract class Test5a extends core::Object {
  synthetic constructor •() → self::Test5a
    ;
  abstract operator [](core::String s) → core::num;
  abstract operator []=(core::String s, core::num v) → void;
  method test() → void
    ;
}
abstract class Test5b extends core::Object {
  synthetic constructor •() → self::Test5b
    ;
  abstract operator [](core::String s) → core::num?;
  abstract operator []=(core::String s, core::num? v) → void;
  method test() → void
    ;
}
abstract class Test6a extends core::Object {
  synthetic constructor •() → self::Test6a
    ;
  abstract operator [](core::String s) → core::num;
  abstract operator []=(core::String s, core::double v) → void;
  method test() → void
    ;
}
abstract class Test6b extends core::Object {
  synthetic constructor •() → self::Test6b
    ;
  abstract operator [](core::String s) → core::num?;
  abstract operator []=(core::String s, core::double? v) → void;
  method test() → void
    ;
}
abstract class Test7a extends core::Object {
  synthetic constructor •() → self::Test7a
    ;
  abstract operator [](core::String s) → core::double;
  abstract operator []=(core::String s, core::int v) → void;
  method test() → void
    ;
}
abstract class Test7b extends core::Object {
  synthetic constructor •() → self::Test7b
    ;
  abstract operator [](core::String s) → core::double?;
  abstract operator []=(core::String s, core::int? v) → void;
  method test() → void
    ;
}
abstract class Test8a extends core::Object {
  synthetic constructor •() → self::Test8a
    ;
  abstract operator [](core::String s) → core::double;
  abstract operator []=(core::String s, core::num v) → void;
  method test() → void
    ;
}
abstract class Test8b extends core::Object {
  synthetic constructor •() → self::Test8b
    ;
  abstract operator [](core::String s) → core::double?;
  abstract operator []=(core::String s, core::num? v) → void;
  method test() → void
    ;
}
abstract class Test9a extends core::Object {
  synthetic constructor •() → self::Test9a
    ;
  abstract operator [](core::String s) → core::double;
  abstract operator []=(core::String s, core::double v) → void;
  method test() → void
    ;
}
abstract class Test9b extends core::Object {
  synthetic constructor •() → self::Test9b
    ;
  abstract operator [](core::String s) → core::double?;
  abstract operator []=(core::String s, core::double? v) → void;
  method test() → void
    ;
}
static method getInt() → core::int
  ;
static method getNum() → core::num
  ;
static method getDouble() → core::double
  ;
static method main() → dynamic
  ;
