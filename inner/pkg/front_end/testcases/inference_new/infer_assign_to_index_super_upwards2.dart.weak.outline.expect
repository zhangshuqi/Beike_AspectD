library test;
import self as self;
import "dart:core" as core;

abstract class Base<T extends core::Object? = dynamic, U extends core::Object? = dynamic> extends core::Object {
  synthetic constructor •() → self::Base<self::Base::T%, self::Base::U%>
    ;
  operator [](core::String s) → self::Base::T%
    ;
  operator []=(core::String s, covariant-by-class self::Base::U% v) → void
    ;
  abstract method getValue(core::String s) → self::Base::T%;
  abstract method setValue(core::String s, covariant-by-class self::Base::U% v) → void;
}
abstract class Base2<T extends core::Object? = dynamic, U extends core::Object? = dynamic> extends core::Object {
  synthetic constructor •() → self::Base2<self::Base2::T%, self::Base2::U%>
    ;
  operator [](core::String s) → self::Base2::T?
    ;
  operator []=(core::String s, covariant-by-class self::Base2::U? v) → void
    ;
  abstract method getValue(core::String s) → self::Base2::T?;
  abstract method setValue(core::String s, covariant-by-class self::Base2::U? v) → void;
}
abstract class Test1a extends self::Base<core::int, core::int> {
  synthetic constructor •() → self::Test1a
    ;
  method test() → void
    ;
}
abstract class Test1b extends self::Base2<core::int, core::int> {
  synthetic constructor •() → self::Test1b
    ;
  method test() → void
    ;
}
abstract class Test2a extends self::Base<core::int, core::num> {
  synthetic constructor •() → self::Test2a
    ;
  method test() → void
    ;
}
abstract class Test2b extends self::Base2<core::int, core::num> {
  synthetic constructor •() → self::Test2b
    ;
  method test() → void
    ;
}
abstract class Test3a extends self::Base<core::int, core::double> {
  synthetic constructor •() → self::Test3a
    ;
  method test() → void
    ;
}
abstract class Test3b extends self::Base2<core::int, core::double> {
  synthetic constructor •() → self::Test3b
    ;
  method test() → void
    ;
}
abstract class Test4a extends self::Base<core::num, core::int> {
  synthetic constructor •() → self::Test4a
    ;
  method test() → void
    ;
}
abstract class Test4b extends self::Base2<core::num, core::int> {
  synthetic constructor •() → self::Test4b
    ;
  method test() → void
    ;
}
abstract class Test5a extends self::Base<core::num, core::num> {
  synthetic constructor •() → self::Test5a
    ;
  method test() → void
    ;
}
abstract class Test5b extends self::Base2<core::num, core::num> {
  synthetic constructor •() → self::Test5b
    ;
  method test() → void
    ;
}
abstract class Test6a extends self::Base<core::num, core::double> {
  synthetic constructor •() → self::Test6a
    ;
  method test() → void
    ;
}
abstract class Test6b extends self::Base2<core::num, core::double> {
  synthetic constructor •() → self::Test6b
    ;
  method test() → void
    ;
}
abstract class Test7a extends self::Base<core::double, core::int> {
  synthetic constructor •() → self::Test7a
    ;
  method test() → void
    ;
}
abstract class Test7b extends self::Base2<core::double, core::int> {
  synthetic constructor •() → self::Test7b
    ;
  method test() → void
    ;
}
abstract class Test8a extends self::Base<core::double, core::num> {
  synthetic constructor •() → self::Test8a
    ;
  method test() → void
    ;
}
abstract class Test8b extends self::Base2<core::double, core::num> {
  synthetic constructor •() → self::Test8b
    ;
  method test() → void
    ;
}
abstract class Test9a extends self::Base<core::double, core::double> {
  synthetic constructor •() → self::Test9a
    ;
  method test() → void
    ;
}
abstract class Test9b extends self::Base2<core::double, core::double> {
  synthetic constructor •() → self::Test9b
    ;
  method test() → void
    ;
}
static method getInt() → core::int
  ;
static method getNum() → core::num
  ;
static method getDouble() → core::double
  ;
static method main() → dynamic
  ;
