library;
import self as self;
import "dart:core" as core;

typedef A<X extends self::C<X> = self::C<dynamic>> = self::C<X>;
class C<X extends core::Object? = dynamic> extends core::Object {
  constructor •() → self::C<self::C::X%>
    ;
  static factory foo<X extends core::Object? = dynamic>() → self::C<self::C::foo::X%>
    ;
}
static method foo() → dynamic
  ;
static method main() → dynamic
  ;
static method _#A#new#tearOff<X extends self::C<self::_#A#new#tearOff::X> = self::C<dynamic>>() → self::C<self::_#A#new#tearOff::X>
  return new self::C::•<self::_#A#new#tearOff::X>();
static method _#A#foo#tearOff<X extends self::C<self::_#A#foo#tearOff::X> = self::C<dynamic>>() → self::C<self::_#A#foo#tearOff::X>
  return self::C::foo<self::_#A#foo#tearOff::X>();
