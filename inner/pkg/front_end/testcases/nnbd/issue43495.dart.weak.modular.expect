library;
//
// Problems in library:
//
// pkg/front_end/testcases/nnbd/issue43495.dart:8:9: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
//     {...a}, // Error.
//         ^
//
// pkg/front_end/testcases/nnbd/issue43495.dart:9:9: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
//     {...b}, // Error.
//         ^
//
// pkg/front_end/testcases/nnbd/issue43495.dart:10:9: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
//     {...c}, // Error.
//         ^
//
// pkg/front_end/testcases/nnbd/issue43495.dart:11:9: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
//     {...d}, // Error.
//         ^
//
// pkg/front_end/testcases/nnbd/issue43495.dart:12:19: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
//     <int, int>{...a}, // Error.
//                   ^
//
// pkg/front_end/testcases/nnbd/issue43495.dart:12:19: Error: Unexpected type 'List<int>?' of a map spread entry.  Expected 'dynamic' or a Map.
//  - 'List' is from 'dart:core'.
//     <int, int>{...a}, // Error.
//                   ^
//
// pkg/front_end/testcases/nnbd/issue43495.dart:13:14: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
//     <int>{...d}, // Error.
//              ^
//
// pkg/front_end/testcases/nnbd/issue43495.dart:13:14: Error: Unexpected type 'Map<int, int>?' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//     <int>{...d}, // Error.
//              ^
//
// pkg/front_end/testcases/nnbd/issue43495.dart:14:24: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
//     {if (condition) ...a}, // Error.
//                        ^
//
// pkg/front_end/testcases/nnbd/issue43495.dart:15:24: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
//     {if (condition) ...b}, // Error.
//                        ^
//
// pkg/front_end/testcases/nnbd/issue43495.dart:16:24: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
//     {if (condition) ...c}, // Error.
//                        ^
//
// pkg/front_end/testcases/nnbd/issue43495.dart:17:24: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
//     {if (condition) ...d}, // Error.
//                        ^
//
// pkg/front_end/testcases/nnbd/issue43495.dart:18:37: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
//     {for (dynamic e in iterable) ...a}, // Error.
//                                     ^
//
// pkg/front_end/testcases/nnbd/issue43495.dart:19:37: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
//     {for (dynamic e in iterable) ...b}, // Error.
//                                     ^
//
// pkg/front_end/testcases/nnbd/issue43495.dart:20:37: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
//     {for (dynamic e in iterable) ...c}, // Error.
//                                     ^
//
// pkg/front_end/testcases/nnbd/issue43495.dart:21:37: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
//     {for (dynamic e in iterable) ...d}, // Error.
//                                     ^
//
// pkg/front_end/testcases/nnbd/issue43495.dart:22:38: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
//     {for (int i = 0; i < 42; ++i) ...a}, // Error.
//                                      ^
//
// pkg/front_end/testcases/nnbd/issue43495.dart:23:38: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
//     {for (int i = 0; i < 42; ++i) ...b}, // Error.
//                                      ^
//
// pkg/front_end/testcases/nnbd/issue43495.dart:24:38: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
//     {for (int i = 0; i < 42; ++i) ...c}, // Error.
//                                      ^
//
// pkg/front_end/testcases/nnbd/issue43495.dart:25:38: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
//     {for (int i = 0; i < 42; ++i) ...d}, // Error.
//                                      ^
//
// pkg/front_end/testcases/nnbd/issue43495.dart:50:9: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
//     {...x}, // Error.
//         ^
//
// pkg/front_end/testcases/nnbd/issue43495.dart:51:9: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
//     {...y}, // Error.
//         ^
//
// pkg/front_end/testcases/nnbd/issue43495.dart:52:9: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
//     {...z}, // Error.
//         ^
//
// pkg/front_end/testcases/nnbd/issue43495.dart:53:9: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
//     {...w}, // Error.
//         ^
//
// pkg/front_end/testcases/nnbd/issue43495.dart:54:19: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
//     <int, int>{...x}, // Error.
//                   ^
//
// pkg/front_end/testcases/nnbd/issue43495.dart:54:19: Error: Unexpected type 'X' of a map spread entry.  Expected 'dynamic' or a Map.
//     <int, int>{...x}, // Error.
//                   ^
//
// pkg/front_end/testcases/nnbd/issue43495.dart:55:14: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
//     <int>{...w}, // Error.
//              ^
//
// pkg/front_end/testcases/nnbd/issue43495.dart:55:14: Error: Unexpected type 'W' of a spread.  Expected 'dynamic' or an Iterable.
//     <int>{...w}, // Error.
//              ^
//
// pkg/front_end/testcases/nnbd/issue43495.dart:56:24: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
//     {if (condition) ...x}, // Error.
//                        ^
//
// pkg/front_end/testcases/nnbd/issue43495.dart:57:24: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
//     {if (condition) ...y}, // Error.
//                        ^
//
// pkg/front_end/testcases/nnbd/issue43495.dart:58:24: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
//     {if (condition) ...z}, // Error.
//                        ^
//
// pkg/front_end/testcases/nnbd/issue43495.dart:59:24: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
//     {if (condition) ...w}, // Error.
//                        ^
//
// pkg/front_end/testcases/nnbd/issue43495.dart:60:37: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
//     {for (dynamic e in iterable) ...x}, // Error.
//                                     ^
//
// pkg/front_end/testcases/nnbd/issue43495.dart:61:37: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
//     {for (dynamic e in iterable) ...y}, // Error.
//                                     ^
//
// pkg/front_end/testcases/nnbd/issue43495.dart:62:37: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
//     {for (dynamic e in iterable) ...z}, // Error.
//                                     ^
//
// pkg/front_end/testcases/nnbd/issue43495.dart:63:37: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
//     {for (dynamic e in iterable) ...w}, // Error.
//                                     ^
//
// pkg/front_end/testcases/nnbd/issue43495.dart:64:38: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
//     {for (int i = 0; i < 42; ++i) ...x}, // Error.
//                                      ^
//
// pkg/front_end/testcases/nnbd/issue43495.dart:65:38: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
//     {for (int i = 0; i < 42; ++i) ...y}, // Error.
//                                      ^
//
// pkg/front_end/testcases/nnbd/issue43495.dart:66:38: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
//     {for (int i = 0; i < 42; ++i) ...z}, // Error.
//                                      ^
//
// pkg/front_end/testcases/nnbd/issue43495.dart:67:38: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
//     {for (int i = 0; i < 42; ++i) ...w}, // Error.
//                                      ^
//
import self as self;
import "dart:core" as core;
import "dart:collection" as col;

static method foo(core::bool condition, core::Iterable<dynamic> iterable, core::List<core::int>? a, core::Set<core::int>? b, core::Iterable<core::int>? c, core::Map<core::int, core::int>? d) â†’ dynamic {
  return <core::Object>[ block {
    final core::Set<core::int> #t1 = col::LinkedHashSet::of<core::int>(invalid-expression "pkg/front_end/testcases/nnbd/issue43495.dart:8:9: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
    {...a}, // Error.
        ^");
  } =>#t1, block {
    final core::Set<core::int> #t2 = col::LinkedHashSet::of<core::int>(invalid-expression "pkg/front_end/testcases/nnbd/issue43495.dart:9:9: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
    {...b}, // Error.
        ^");
  } =>#t2, block {
    final core::Set<core::int> #t3 = col::LinkedHashSet::of<core::int>(invalid-expression "pkg/front_end/testcases/nnbd/issue43495.dart:10:9: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
    {...c}, // Error.
        ^");
  } =>#t3, <core::int, core::int>{invalid-expression "pkg/front_end/testcases/nnbd/issue43495.dart:11:9: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
    {...d}, // Error.
        ^": null}, <core::int, core::int>{invalid-expression "pkg/front_end/testcases/nnbd/issue43495.dart:12:19: Error: Unexpected type 'List<int>?' of a map spread entry.  Expected 'dynamic' or a Map.
 - 'List' is from 'dart:core'.
    <int, int>{...a}, // Error.
                  ^": null}, block {
    final core::Set<core::int> #t4 = col::LinkedHashSet::â€¢<core::int>();
    #t4.{core::Set::add}{Invariant}(invalid-expression "pkg/front_end/testcases/nnbd/issue43495.dart:13:14: Error: Unexpected type 'Map<int, int>?' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
    <int>{...d}, // Error.
             ^"){(core::int) â†’ core::bool};
  } =>#t4, block {
    final core::Set<core::int> #t5 = col::LinkedHashSet::â€¢<core::int>();
    if(condition)
      for (final has-declared-initializer dynamic #t6 in invalid-expression "pkg/front_end/testcases/nnbd/issue43495.dart:14:24: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
    {if (condition) ...a}, // Error.
                       ^") {
        final core::int #t7 = #t6 as{TypeError} core::int;
        #t5.{core::Set::add}{Invariant}(#t7){(core::int) â†’ core::bool};
      }
  } =>#t5, block {
    final core::Set<core::int> #t8 = col::LinkedHashSet::â€¢<core::int>();
    if(condition)
      for (final has-declared-initializer dynamic #t9 in invalid-expression "pkg/front_end/testcases/nnbd/issue43495.dart:15:24: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
    {if (condition) ...b}, // Error.
                       ^") {
        final core::int #t10 = #t9 as{TypeError} core::int;
        #t8.{core::Set::add}{Invariant}(#t10){(core::int) â†’ core::bool};
      }
  } =>#t8, block {
    final core::Set<core::int> #t11 = col::LinkedHashSet::â€¢<core::int>();
    if(condition)
      for (final has-declared-initializer dynamic #t12 in invalid-expression "pkg/front_end/testcases/nnbd/issue43495.dart:16:24: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
    {if (condition) ...c}, // Error.
                       ^") {
        final core::int #t13 = #t12 as{TypeError} core::int;
        #t11.{core::Set::add}{Invariant}(#t13){(core::int) â†’ core::bool};
      }
  } =>#t11, block {
    final core::Map<core::int, core::int> #t14 = <core::int, core::int>{};
    if(condition)
      #t14.{core::Map::[]=}{Invariant}(invalid-expression "pkg/front_end/testcases/nnbd/issue43495.dart:17:24: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
    {if (condition) ...d}, // Error.
                       ^", null){(core::int, core::int) â†’ void};
  } =>#t14, block {
    final core::Set<core::int> #t15 = col::LinkedHashSet::â€¢<core::int>();
    for (dynamic e in iterable)
      for (final has-declared-initializer dynamic #t16 in invalid-expression "pkg/front_end/testcases/nnbd/issue43495.dart:18:37: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
    {for (dynamic e in iterable) ...a}, // Error.
                                    ^") {
        final core::int #t17 = #t16 as{TypeError} core::int;
        #t15.{core::Set::add}{Invariant}(#t17){(core::int) â†’ core::bool};
      }
  } =>#t15, block {
    final core::Set<core::int> #t18 = col::LinkedHashSet::â€¢<core::int>();
    for (dynamic e in iterable)
      for (final has-declared-initializer dynamic #t19 in invalid-expression "pkg/front_end/testcases/nnbd/issue43495.dart:19:37: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
    {for (dynamic e in iterable) ...b}, // Error.
                                    ^") {
        final core::int #t20 = #t19 as{TypeError} core::int;
        #t18.{core::Set::add}{Invariant}(#t20){(core::int) â†’ core::bool};
      }
  } =>#t18, block {
    final core::Set<core::int> #t21 = col::LinkedHashSet::â€¢<core::int>();
    for (dynamic e in iterable)
      for (final has-declared-initializer dynamic #t22 in invalid-expression "pkg/front_end/testcases/nnbd/issue43495.dart:20:37: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
    {for (dynamic e in iterable) ...c}, // Error.
                                    ^") {
        final core::int #t23 = #t22 as{TypeError} core::int;
        #t21.{core::Set::add}{Invariant}(#t23){(core::int) â†’ core::bool};
      }
  } =>#t21, block {
    final core::Map<core::int, core::int> #t24 = <core::int, core::int>{};
    for (dynamic e in iterable)
      #t24.{core::Map::[]=}{Invariant}(invalid-expression "pkg/front_end/testcases/nnbd/issue43495.dart:21:37: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
    {for (dynamic e in iterable) ...d}, // Error.
                                    ^", null){(core::int, core::int) â†’ void};
  } =>#t24, block {
    final core::Set<core::int> #t25 = col::LinkedHashSet::â€¢<core::int>();
    for (core::int i = 0; i.{core::num::<}(42){(core::num) â†’ core::bool}; i = i.{core::num::+}(1){(core::num) â†’ core::int})
      for (final has-declared-initializer dynamic #t26 in invalid-expression "pkg/front_end/testcases/nnbd/issue43495.dart:22:38: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
    {for (int i = 0; i < 42; ++i) ...a}, // Error.
                                     ^") {
        final core::int #t27 = #t26 as{TypeError} core::int;
        #t25.{core::Set::add}{Invariant}(#t27){(core::int) â†’ core::bool};
      }
  } =>#t25, block {
    final core::Set<core::int> #t28 = col::LinkedHashSet::â€¢<core::int>();
    for (core::int i = 0; i.{core::num::<}(42){(core::num) â†’ core::bool}; i = i.{core::num::+}(1){(core::num) â†’ core::int})
      for (final has-declared-initializer dynamic #t29 in invalid-expression "pkg/front_end/testcases/nnbd/issue43495.dart:23:38: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
    {for (int i = 0; i < 42; ++i) ...b}, // Error.
                                     ^") {
        final core::int #t30 = #t29 as{TypeError} core::int;
        #t28.{core::Set::add}{Invariant}(#t30){(core::int) â†’ core::bool};
      }
  } =>#t28, block {
    final core::Set<core::int> #t31 = col::LinkedHashSet::â€¢<core::int>();
    for (core::int i = 0; i.{core::num::<}(42){(core::num) â†’ core::bool}; i = i.{core::num::+}(1){(core::num) â†’ core::int})
      for (final has-declared-initializer dynamic #t32 in invalid-expression "pkg/front_end/testcases/nnbd/issue43495.dart:24:38: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
    {for (int i = 0; i < 42; ++i) ...c}, // Error.
                                     ^") {
        final core::int #t33 = #t32 as{TypeError} core::int;
        #t31.{core::Set::add}{Invariant}(#t33){(core::int) â†’ core::bool};
      }
  } =>#t31, block {
    final core::Map<core::int, core::int> #t34 = <core::int, core::int>{};
    for (core::int i = 0; i.{core::num::<}(42){(core::num) â†’ core::bool}; i = i.{core::num::+}(1){(core::num) â†’ core::int})
      #t34.{core::Map::[]=}{Invariant}(invalid-expression "pkg/front_end/testcases/nnbd/issue43495.dart:25:38: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
    {for (int i = 0; i < 42; ++i) ...d}, // Error.
                                     ^", null){(core::int, core::int) â†’ void};
  } =>#t34, block {
    final core::Set<core::int> #t35 = col::LinkedHashSet::â€¢<core::int>();
    final core::Iterable<core::int>? #t36 = a;
    if(!(#t36 == null))
      #t35.{core::Set::addAll}{Invariant}(#t36{core::Iterable<core::int>}){(core::Iterable<core::int>) â†’ void};
  } =>#t35, block {
    final core::Set<core::int> #t37 = col::LinkedHashSet::â€¢<core::int>();
    final core::Iterable<core::int>? #t38 = b;
    if(!(#t38 == null))
      #t37.{core::Set::addAll}{Invariant}(#t38{core::Iterable<core::int>}){(core::Iterable<core::int>) â†’ void};
  } =>#t37, block {
    final core::Set<core::int> #t39 = col::LinkedHashSet::â€¢<core::int>();
    final core::Iterable<core::int>? #t40 = c;
    if(!(#t40 == null))
      #t39.{core::Set::addAll}{Invariant}(#t40{core::Iterable<core::int>}){(core::Iterable<core::int>) â†’ void};
  } =>#t39, block {
    final core::Map<core::int, core::int> #t41 = <core::int, core::int>{};
    final core::Map<core::int, core::int>? #t42 = d;
    if(!(#t42 == null))
      #t41.{core::Map::addAll}{Invariant}(#t42{core::Map<core::int, core::int>}){(core::Map<core::int, core::int>) â†’ void};
  } =>#t41, block {
    final core::Set<core::int> #t43 = col::LinkedHashSet::â€¢<core::int>();
    if(condition) {
      final core::Iterable<dynamic>? #t44 = a;
      if(!(#t44 == null))
        for (final has-declared-initializer dynamic #t45 in #t44{core::Iterable<dynamic>}) {
          final core::int #t46 = #t45 as{TypeError} core::int;
          #t43.{core::Set::add}{Invariant}(#t46){(core::int) â†’ core::bool};
        }
    }
  } =>#t43, block {
    final core::Set<core::int> #t47 = col::LinkedHashSet::â€¢<core::int>();
    if(condition) {
      final core::Iterable<dynamic>? #t48 = b;
      if(!(#t48 == null))
        for (final has-declared-initializer dynamic #t49 in #t48{core::Iterable<dynamic>}) {
          final core::int #t50 = #t49 as{TypeError} core::int;
          #t47.{core::Set::add}{Invariant}(#t50){(core::int) â†’ core::bool};
        }
    }
  } =>#t47, block {
    final core::Set<core::int> #t51 = col::LinkedHashSet::â€¢<core::int>();
    if(condition) {
      final core::Iterable<dynamic>? #t52 = c;
      if(!(#t52 == null))
        for (final has-declared-initializer dynamic #t53 in #t52{core::Iterable<dynamic>}) {
          final core::int #t54 = #t53 as{TypeError} core::int;
          #t51.{core::Set::add}{Invariant}(#t54){(core::int) â†’ core::bool};
        }
    }
  } =>#t51, block {
    final core::Map<core::int, core::int> #t55 = <core::int, core::int>{};
    if(condition) {
      final core::Map<core::int, core::int>? #t56 = d;
      if(!(#t56 == null))
        #t55.{core::Map::addAll}{Invariant}(#t56{core::Map<core::int, core::int>}){(core::Map<core::int, core::int>) â†’ void};
    }
  } =>#t55, block {
    final core::Set<core::int> #t57 = col::LinkedHashSet::â€¢<core::int>();
    for (dynamic e in iterable) {
      final core::Iterable<dynamic>? #t58 = a;
      if(!(#t58 == null))
        for (final has-declared-initializer dynamic #t59 in #t58{core::Iterable<dynamic>}) {
          final core::int #t60 = #t59 as{TypeError} core::int;
          #t57.{core::Set::add}{Invariant}(#t60){(core::int) â†’ core::bool};
        }
    }
  } =>#t57, block {
    final core::Set<core::int> #t61 = col::LinkedHashSet::â€¢<core::int>();
    for (dynamic e in iterable) {
      final core::Iterable<dynamic>? #t62 = b;
      if(!(#t62 == null))
        for (final has-declared-initializer dynamic #t63 in #t62{core::Iterable<dynamic>}) {
          final core::int #t64 = #t63 as{TypeError} core::int;
          #t61.{core::Set::add}{Invariant}(#t64){(core::int) â†’ core::bool};
        }
    }
  } =>#t61, block {
    final core::Set<core::int> #t65 = col::LinkedHashSet::â€¢<core::int>();
    for (dynamic e in iterable) {
      final core::Iterable<dynamic>? #t66 = c;
      if(!(#t66 == null))
        for (final has-declared-initializer dynamic #t67 in #t66{core::Iterable<dynamic>}) {
          final core::int #t68 = #t67 as{TypeError} core::int;
          #t65.{core::Set::add}{Invariant}(#t68){(core::int) â†’ core::bool};
        }
    }
  } =>#t65, block {
    final core::Map<core::int, core::int> #t69 = <core::int, core::int>{};
    for (dynamic e in iterable) {
      final core::Map<core::int, core::int>? #t70 = d;
      if(!(#t70 == null))
        #t69.{core::Map::addAll}{Invariant}(#t70{core::Map<core::int, core::int>}){(core::Map<core::int, core::int>) â†’ void};
    }
  } =>#t69, block {
    final core::Set<core::int> #t71 = col::LinkedHashSet::â€¢<core::int>();
    for (core::int i = 0; i.{core::num::<}(42){(core::num) â†’ core::bool}; i = i.{core::num::+}(1){(core::num) â†’ core::int}) {
      final core::Iterable<dynamic>? #t72 = a;
      if(!(#t72 == null))
        for (final has-declared-initializer dynamic #t73 in #t72{core::Iterable<dynamic>}) {
          final core::int #t74 = #t73 as{TypeError} core::int;
          #t71.{core::Set::add}{Invariant}(#t74){(core::int) â†’ core::bool};
        }
    }
  } =>#t71, block {
    final core::Set<core::int> #t75 = col::LinkedHashSet::â€¢<core::int>();
    for (core::int i = 0; i.{core::num::<}(42){(core::num) â†’ core::bool}; i = i.{core::num::+}(1){(core::num) â†’ core::int}) {
      final core::Iterable<dynamic>? #t76 = b;
      if(!(#t76 == null))
        for (final has-declared-initializer dynamic #t77 in #t76{core::Iterable<dynamic>}) {
          final core::int #t78 = #t77 as{TypeError} core::int;
          #t75.{core::Set::add}{Invariant}(#t78){(core::int) â†’ core::bool};
        }
    }
  } =>#t75, block {
    final core::Set<core::int> #t79 = col::LinkedHashSet::â€¢<core::int>();
    for (core::int i = 0; i.{core::num::<}(42){(core::num) â†’ core::bool}; i = i.{core::num::+}(1){(core::num) â†’ core::int}) {
      final core::Iterable<dynamic>? #t80 = c;
      if(!(#t80 == null))
        for (final has-declared-initializer dynamic #t81 in #t80{core::Iterable<dynamic>}) {
          final core::int #t82 = #t81 as{TypeError} core::int;
          #t79.{core::Set::add}{Invariant}(#t82){(core::int) â†’ core::bool};
        }
    }
  } =>#t79, block {
    final core::Map<core::int, core::int> #t83 = <core::int, core::int>{};
    for (core::int i = 0; i.{core::num::<}(42){(core::num) â†’ core::bool}; i = i.{core::num::+}(1){(core::num) â†’ core::int}) {
      final core::Map<core::int, core::int>? #t84 = d;
      if(!(#t84 == null))
        #t83.{core::Map::addAll}{Invariant}(#t84{core::Map<core::int, core::int>}){(core::Map<core::int, core::int>) â†’ void};
    }
  } =>#t83];
}
static method bar<X extends core::List<core::int>?, Y extends core::Set<core::int>?, Z extends core::Iterable<core::int>?, W extends core::Map<core::int, core::int>?>(core::bool condition, core::Iterable<dynamic> iterable, self::bar::X% x, self::bar::Y% y, self::bar::Z% z, self::bar::W% w) â†’ dynamic {
  return <core::Object>[ block {
    final core::Set<core::int> #t85 = col::LinkedHashSet::of<core::int>(invalid-expression "pkg/front_end/testcases/nnbd/issue43495.dart:50:9: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
    {...x}, // Error.
        ^");
  } =>#t85, block {
    final core::Set<core::int> #t86 = col::LinkedHashSet::of<core::int>(invalid-expression "pkg/front_end/testcases/nnbd/issue43495.dart:51:9: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
    {...y}, // Error.
        ^");
  } =>#t86, block {
    final core::Set<core::int> #t87 = col::LinkedHashSet::of<core::int>(invalid-expression "pkg/front_end/testcases/nnbd/issue43495.dart:52:9: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
    {...z}, // Error.
        ^");
  } =>#t87, <core::int, core::int>{invalid-expression "pkg/front_end/testcases/nnbd/issue43495.dart:53:9: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
    {...w}, // Error.
        ^": null}, <core::int, core::int>{invalid-expression "pkg/front_end/testcases/nnbd/issue43495.dart:54:19: Error: Unexpected type 'X' of a map spread entry.  Expected 'dynamic' or a Map.
    <int, int>{...x}, // Error.
                  ^": null}, block {
    final core::Set<core::int> #t88 = col::LinkedHashSet::â€¢<core::int>();
    #t88.{core::Set::add}{Invariant}(invalid-expression "pkg/front_end/testcases/nnbd/issue43495.dart:55:14: Error: Unexpected type 'W' of a spread.  Expected 'dynamic' or an Iterable.
    <int>{...w}, // Error.
             ^"){(core::int) â†’ core::bool};
  } =>#t88, block {
    final core::Set<core::int> #t89 = col::LinkedHashSet::â€¢<core::int>();
    if(condition)
      for (final has-declared-initializer dynamic #t90 in invalid-expression "pkg/front_end/testcases/nnbd/issue43495.dart:56:24: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
    {if (condition) ...x}, // Error.
                       ^") {
        final core::int #t91 = #t90 as{TypeError} core::int;
        #t89.{core::Set::add}{Invariant}(#t91){(core::int) â†’ core::bool};
      }
  } =>#t89, block {
    final core::Set<core::int> #t92 = col::LinkedHashSet::â€¢<core::int>();
    if(condition)
      for (final has-declared-initializer dynamic #t93 in invalid-expression "pkg/front_end/testcases/nnbd/issue43495.dart:57:24: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
    {if (condition) ...y}, // Error.
                       ^") {
        final core::int #t94 = #t93 as{TypeError} core::int;
        #t92.{core::Set::add}{Invariant}(#t94){(core::int) â†’ core::bool};
      }
  } =>#t92, block {
    final core::Set<core::int> #t95 = col::LinkedHashSet::â€¢<core::int>();
    if(condition)
      for (final has-declared-initializer dynamic #t96 in invalid-expression "pkg/front_end/testcases/nnbd/issue43495.dart:58:24: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
    {if (condition) ...z}, // Error.
                       ^") {
        final core::int #t97 = #t96 as{TypeError} core::int;
        #t95.{core::Set::add}{Invariant}(#t97){(core::int) â†’ core::bool};
      }
  } =>#t95, block {
    final core::Map<core::int, core::int> #t98 = <core::int, core::int>{};
    if(condition)
      #t98.{core::Map::[]=}{Invariant}(invalid-expression "pkg/front_end/testcases/nnbd/issue43495.dart:59:24: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
    {if (condition) ...w}, // Error.
                       ^", null){(core::int, core::int) â†’ void};
  } =>#t98, block {
    final core::Set<core::int> #t99 = col::LinkedHashSet::â€¢<core::int>();
    for (dynamic e in iterable)
      for (final has-declared-initializer dynamic #t100 in invalid-expression "pkg/front_end/testcases/nnbd/issue43495.dart:60:37: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
    {for (dynamic e in iterable) ...x}, // Error.
                                    ^") {
        final core::int #t101 = #t100 as{TypeError} core::int;
        #t99.{core::Set::add}{Invariant}(#t101){(core::int) â†’ core::bool};
      }
  } =>#t99, block {
    final core::Set<core::int> #t102 = col::LinkedHashSet::â€¢<core::int>();
    for (dynamic e in iterable)
      for (final has-declared-initializer dynamic #t103 in invalid-expression "pkg/front_end/testcases/nnbd/issue43495.dart:61:37: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
    {for (dynamic e in iterable) ...y}, // Error.
                                    ^") {
        final core::int #t104 = #t103 as{TypeError} core::int;
        #t102.{core::Set::add}{Invariant}(#t104){(core::int) â†’ core::bool};
      }
  } =>#t102, block {
    final core::Set<core::int> #t105 = col::LinkedHashSet::â€¢<core::int>();
    for (dynamic e in iterable)
      for (final has-declared-initializer dynamic #t106 in invalid-expression "pkg/front_end/testcases/nnbd/issue43495.dart:62:37: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
    {for (dynamic e in iterable) ...z}, // Error.
                                    ^") {
        final core::int #t107 = #t106 as{TypeError} core::int;
        #t105.{core::Set::add}{Invariant}(#t107){(core::int) â†’ core::bool};
      }
  } =>#t105, block {
    final core::Map<core::int, core::int> #t108 = <core::int, core::int>{};
    for (dynamic e in iterable)
      #t108.{core::Map::[]=}{Invariant}(invalid-expression "pkg/front_end/testcases/nnbd/issue43495.dart:63:37: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
    {for (dynamic e in iterable) ...w}, // Error.
                                    ^", null){(core::int, core::int) â†’ void};
  } =>#t108, block {
    final core::Set<core::int> #t109 = col::LinkedHashSet::â€¢<core::int>();
    for (core::int i = 0; i.{core::num::<}(42){(core::num) â†’ core::bool}; i = i.{core::num::+}(1){(core::num) â†’ core::int})
      for (final has-declared-initializer dynamic #t110 in invalid-expression "pkg/front_end/testcases/nnbd/issue43495.dart:64:38: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
    {for (int i = 0; i < 42; ++i) ...x}, // Error.
                                     ^") {
        final core::int #t111 = #t110 as{TypeError} core::int;
        #t109.{core::Set::add}{Invariant}(#t111){(core::int) â†’ core::bool};
      }
  } =>#t109, block {
    final core::Set<core::int> #t112 = col::LinkedHashSet::â€¢<core::int>();
    for (core::int i = 0; i.{core::num::<}(42){(core::num) â†’ core::bool}; i = i.{core::num::+}(1){(core::num) â†’ core::int})
      for (final has-declared-initializer dynamic #t113 in invalid-expression "pkg/front_end/testcases/nnbd/issue43495.dart:65:38: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
    {for (int i = 0; i < 42; ++i) ...y}, // Error.
                                     ^") {
        final core::int #t114 = #t113 as{TypeError} core::int;
        #t112.{core::Set::add}{Invariant}(#t114){(core::int) â†’ core::bool};
      }
  } =>#t112, block {
    final core::Set<core::int> #t115 = col::LinkedHashSet::â€¢<core::int>();
    for (core::int i = 0; i.{core::num::<}(42){(core::num) â†’ core::bool}; i = i.{core::num::+}(1){(core::num) â†’ core::int})
      for (final has-declared-initializer dynamic #t116 in invalid-expression "pkg/front_end/testcases/nnbd/issue43495.dart:66:38: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
    {for (int i = 0; i < 42; ++i) ...z}, // Error.
                                     ^") {
        final core::int #t117 = #t116 as{TypeError} core::int;
        #t115.{core::Set::add}{Invariant}(#t117){(core::int) â†’ core::bool};
      }
  } =>#t115, block {
    final core::Map<core::int, core::int> #t118 = <core::int, core::int>{};
    for (core::int i = 0; i.{core::num::<}(42){(core::num) â†’ core::bool}; i = i.{core::num::+}(1){(core::num) â†’ core::int})
      #t118.{core::Map::[]=}{Invariant}(invalid-expression "pkg/front_end/testcases/nnbd/issue43495.dart:67:38: Error: An expression whose value can be 'null' must be null-checked before it can be dereferenced.
    {for (int i = 0; i < 42; ++i) ...w}, // Error.
                                     ^", null){(core::int, core::int) â†’ void};
  } =>#t118, block {
    final core::Set<core::int> #t119 = col::LinkedHashSet::â€¢<core::int>();
    final core::Iterable<core::int>? #t120 = x;
    if(!(#t120 == null))
      #t119.{core::Set::addAll}{Invariant}(#t120{core::Iterable<core::int>}){(core::Iterable<core::int>) â†’ void};
  } =>#t119, block {
    final core::Set<core::int> #t121 = col::LinkedHashSet::â€¢<core::int>();
    final core::Iterable<core::int>? #t122 = y;
    if(!(#t122 == null))
      #t121.{core::Set::addAll}{Invariant}(#t122{core::Iterable<core::int>}){(core::Iterable<core::int>) â†’ void};
  } =>#t121, block {
    final core::Set<core::int> #t123 = col::LinkedHashSet::â€¢<core::int>();
    final core::Iterable<core::int>? #t124 = z;
    if(!(#t124 == null))
      #t123.{core::Set::addAll}{Invariant}(#t124{core::Iterable<core::int>}){(core::Iterable<core::int>) â†’ void};
  } =>#t123, block {
    final core::Map<core::int, core::int> #t125 = <core::int, core::int>{};
    final core::Map<core::int, core::int>? #t126 = w;
    if(!(#t126 == null))
      #t125.{core::Map::addAll}{Invariant}(#t126{core::Map<core::int, core::int>}){(core::Map<core::int, core::int>) â†’ void};
  } =>#t125, block {
    final core::Set<core::int> #t127 = col::LinkedHashSet::â€¢<core::int>();
    if(condition) {
      final core::Iterable<dynamic>? #t128 = x;
      if(!(#t128 == null))
        for (final has-declared-initializer dynamic #t129 in #t128{core::Iterable<dynamic>}) {
          final core::int #t130 = #t129 as{TypeError} core::int;
          #t127.{core::Set::add}{Invariant}(#t130){(core::int) â†’ core::bool};
        }
    }
  } =>#t127, block {
    final core::Set<core::int> #t131 = col::LinkedHashSet::â€¢<core::int>();
    if(condition) {
      final core::Iterable<dynamic>? #t132 = y;
      if(!(#t132 == null))
        for (final has-declared-initializer dynamic #t133 in #t132{core::Iterable<dynamic>}) {
          final core::int #t134 = #t133 as{TypeError} core::int;
          #t131.{core::Set::add}{Invariant}(#t134){(core::int) â†’ core::bool};
        }
    }
  } =>#t131, block {
    final core::Set<core::int> #t135 = col::LinkedHashSet::â€¢<core::int>();
    if(condition) {
      final core::Iterable<dynamic>? #t136 = z;
      if(!(#t136 == null))
        for (final has-declared-initializer dynamic #t137 in #t136{core::Iterable<dynamic>}) {
          final core::int #t138 = #t137 as{TypeError} core::int;
          #t135.{core::Set::add}{Invariant}(#t138){(core::int) â†’ core::bool};
        }
    }
  } =>#t135, block {
    final core::Map<core::int, core::int> #t139 = <core::int, core::int>{};
    if(condition) {
      final core::Map<core::int, core::int>? #t140 = w;
      if(!(#t140 == null))
        #t139.{core::Map::addAll}{Invariant}(#t140{core::Map<core::int, core::int>}){(core::Map<core::int, core::int>) â†’ void};
    }
  } =>#t139, block {
    final core::Set<core::int> #t141 = col::LinkedHashSet::â€¢<core::int>();
    for (dynamic e in iterable) {
      final core::Iterable<dynamic>? #t142 = x;
      if(!(#t142 == null))
        for (final has-declared-initializer dynamic #t143 in #t142{core::Iterable<dynamic>}) {
          final core::int #t144 = #t143 as{TypeError} core::int;
          #t141.{core::Set::add}{Invariant}(#t144){(core::int) â†’ core::bool};
        }
    }
  } =>#t141, block {
    final core::Set<core::int> #t145 = col::LinkedHashSet::â€¢<core::int>();
    for (dynamic e in iterable) {
      final core::Iterable<dynamic>? #t146 = y;
      if(!(#t146 == null))
        for (final has-declared-initializer dynamic #t147 in #t146{core::Iterable<dynamic>}) {
          final core::int #t148 = #t147 as{TypeError} core::int;
          #t145.{core::Set::add}{Invariant}(#t148){(core::int) â†’ core::bool};
        }
    }
  } =>#t145, block {
    final core::Set<core::int> #t149 = col::LinkedHashSet::â€¢<core::int>();
    for (dynamic e in iterable) {
      final core::Iterable<dynamic>? #t150 = z;
      if(!(#t150 == null))
        for (final has-declared-initializer dynamic #t151 in #t150{core::Iterable<dynamic>}) {
          final core::int #t152 = #t151 as{TypeError} core::int;
          #t149.{core::Set::add}{Invariant}(#t152){(core::int) â†’ core::bool};
        }
    }
  } =>#t149, block {
    final core::Map<core::int, core::int> #t153 = <core::int, core::int>{};
    for (dynamic e in iterable) {
      final core::Map<core::int, core::int>? #t154 = w;
      if(!(#t154 == null))
        #t153.{core::Map::addAll}{Invariant}(#t154{core::Map<core::int, core::int>}){(core::Map<core::int, core::int>) â†’ void};
    }
  } =>#t153, block {
    final core::Set<core::int> #t155 = col::LinkedHashSet::â€¢<core::int>();
    for (core::int i = 0; i.{core::num::<}(42){(core::num) â†’ core::bool}; i = i.{core::num::+}(1){(core::num) â†’ core::int}) {
      final core::Iterable<dynamic>? #t156 = x;
      if(!(#t156 == null))
        for (final has-declared-initializer dynamic #t157 in #t156{core::Iterable<dynamic>}) {
          final core::int #t158 = #t157 as{TypeError} core::int;
          #t155.{core::Set::add}{Invariant}(#t158){(core::int) â†’ core::bool};
        }
    }
  } =>#t155, block {
    final core::Set<core::int> #t159 = col::LinkedHashSet::â€¢<core::int>();
    for (core::int i = 0; i.{core::num::<}(42){(core::num) â†’ core::bool}; i = i.{core::num::+}(1){(core::num) â†’ core::int}) {
      final core::Iterable<dynamic>? #t160 = y;
      if(!(#t160 == null))
        for (final has-declared-initializer dynamic #t161 in #t160{core::Iterable<dynamic>}) {
          final core::int #t162 = #t161 as{TypeError} core::int;
          #t159.{core::Set::add}{Invariant}(#t162){(core::int) â†’ core::bool};
        }
    }
  } =>#t159, block {
    final core::Set<core::int> #t163 = col::LinkedHashSet::â€¢<core::int>();
    for (core::int i = 0; i.{core::num::<}(42){(core::num) â†’ core::bool}; i = i.{core::num::+}(1){(core::num) â†’ core::int}) {
      final core::Iterable<dynamic>? #t164 = z;
      if(!(#t164 == null))
        for (final has-declared-initializer dynamic #t165 in #t164{core::Iterable<dynamic>}) {
          final core::int #t166 = #t165 as{TypeError} core::int;
          #t163.{core::Set::add}{Invariant}(#t166){(core::int) â†’ core::bool};
        }
    }
  } =>#t163, block {
    final core::Map<core::int, core::int> #t167 = <core::int, core::int>{};
    for (core::int i = 0; i.{core::num::<}(42){(core::num) â†’ core::bool}; i = i.{core::num::+}(1){(core::num) â†’ core::int}) {
      final core::Map<core::int, core::int>? #t168 = w;
      if(!(#t168 == null))
        #t167.{core::Map::addAll}{Invariant}(#t168{core::Map<core::int, core::int>}){(core::Map<core::int, core::int>) â†’ void};
    }
  } =>#t167];
}
static method main() â†’ dynamic {}
